
Welcome to Shaastra's E-Contest.
The 'E' in E-Contest stands for Esoteric Languages(you might have guessed this already).
This contest deals with solving basic questions in a language which hopefully is completely new to you.

This time, the language chosen is "AsciiDots".

It is a fun language which is very different from the conventional programming languages
such as python, C++ etc. The language uses dots which travel along various paths.
They can split, merge with some conditions and operators or even disappear.

At first sight, it might seem to be a rudimentary language, using which not many things can be achieved,
but it is in fact a Turing complete Language!
In other words you can code whatever you’d want to in this language! Mind-boggling, isn’t it?
However practically it cannot be deployed for any serious purpose given the fact that it is
extremely difficult to comprehend and takes time and a lot more brains to code anything useful.

***** NOTE ***** You can view this sheet whenever you want during the contest, so use your time wisely.

*********************************************************************
GENERAL INSTRUCTIONS
*********************************************************************

**** You are allowed to use any online IDE (one link is provided along with the questions)
for your quick checking and debugging of your program before submitting ****
https://tio.run/#asciidots
(NOTE: There are other IDEs online that helps debug better than this one. We prefer using this IDE as it provides more accurate runtime.)


**** The time limit for all questions is 5 seconds.
If any program that takes longer than that on the online IDE we have provided,
press "STOP" (as it is surely due to an infinite loop only, no AsciiDots program we write now takes that much time) ****

**** Don't spam the submit button or any other button. It takes a little time to update your submissions and the standings. Please press once and wait. ****

**** All the questions carry the same weightage, so feel free to change between questions and solve them in any order as you wish.
Though it is arranged almost in increasing order of difficulty, it was difficult for us to decide the ordering itself! ****

**** If there are ties in number of problems solved, the rankings will be decided based on submission time. ****

**** In any case of further ties or discrepancies, the final call will be taken by the event coordinators. ****

**** Hope you find it super fun and All the best. ****

********************************************************************
SYNTAX SHEET :
********************************************************************

The dots are initialised by '.'. They travel horizontally along '-' and vertically along'|'.
These dots carry values in terms of floating point numbers (initialised with 0).

The program ends when any dot encounters '&'.
Alternatively, it also ends when all dots die (i.e. they all pass over the end of a path into nothingness).

``This (two back ticks) indicates a comment in ASCII DOTS

The slash operators act as mirrors,
'/' redirects a left coming dot upwards, or a right coming dot downwards.
('\' follows a similar function)

The arrow operators, such as '^' redirects any dot from the left or right, upwards.
'<', '>', 'v' follow similar function in the respective directions (left, right and down).

The '~' (tilde) operator redirects dots going through it horizontally to the upward path
if a dot waiting at the bottom has a value *not* equal to 0. Otherwise, the dot continues horizontally.
If an exclamation point (!) is under it, then it redirects the dot upwards only if the
value of the dot waiting *is* equal to zero.


Mathematical operators

Primarily there are two types of mathematical operators.

A mathematical operation inside '[]', for example multiplication, multiplies the value that
passes through vertically by the value that runs into it horizontally. The dot passed through it horizontally
is deleted and the dot that arrived from the top or bottom continues through to the other side.

A mathematical operation inside '{}', for example division, divides the value that
enters horizontally by the value that enters vertically. The resulting dot exits horizontally.

The mathematical operations possible are:

*: multiplication
/: division
÷: also division
+: addition
-: subtraction
%: modulus
^: exponent
&: boolean AND
!: boolean NOT
o: boolean OR
x: boolean XOR
>: greater than
G: greater than or equal to
<: less than
L: less than or equal to
=: equal to
!: not equal to

Boolean operations return a dot with a value of 1 if the expression evaluates to true and 0 if false.
These characters are only considered operators when located within brackets.
When outside of brackets, symbols like * perform their regular functions as described earlier.

In order to take input from the user, make use of the command '#?'.

In order to output the values of the dot, use '$#'.

In order to output strings use, $"Your string should be entered here".




